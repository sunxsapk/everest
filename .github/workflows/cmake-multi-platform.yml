name: Build installer for Everest Engine

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-latest]  #windows-latest
        build_type: [Release]
        c_compiler: [gcc, clang] #, cl
        include:
          #- os: windows-latest
            #c_compiler: cl
            #cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
        #exclude:
          #- os: windows-latest
            #c_compiler: gcc
          #- os: windows-latest
            #c_compiler: clang
          #- os: ubuntu-latest
            #c_compiler: cl
          #- os: macos-latest
            #c_compiler: cl

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y cmake ninja-build #zenity

    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake ninja #zenity

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DINSTALL_ASSETS=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Package with CPack
      run: |
        cd build
        cpack -G DEB || cpack -G productbuild  # Ensure correct packaging format

    - name: Rename Installers
      run: |
        cd build
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          mv *.deb everest-engine-${{ matrix.build_type }}.deb
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          mv *.pkg everest-engine-${{ matrix.build_type }}.pkg
        fi

    - name: Upload Installer Artifact
      uses: actions/upload-artifact@v3
      with:
        name: everest-engine-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/*.deb
          build/*.pkg
