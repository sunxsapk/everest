============ Developer Notes =================

Building a game engine from scratch is a huge task in hand. So, I have a plan
to put everything together in a very easy way for development purpose. Things
will proceed in following sequence :-

    - Project will have a master builder which will build 2 subprojects.
    - First project it will build is everest-engine.
    - Then, it will build the game.

    When will the scene/level-editor be built then?
    - Immediately after the scene is made serializable.

=============== Roadmap ======================

- Rendering Texture
- Models format, (asset bundles)
- Entity Component System
- Serialization
- Level Format
- Tools (editor & stuff)
- Physics System
- Scripting
- Make a game run inside editor completely
- Standalone game running

=============== Current Activity =============

- Also, the logging system has its faults due to it been using c's printf for
    for writing on console. So, develop a new logging system for cpp, so that
    user can effectively use overridden '<<' operator for logging the objects too.

=============== Milestones ===================

Now, let's talk about the current milestones of the project:

- Develop Physics system for 2D setup and pave a way for 3D physics too
    - Static and Dynamic Rigidbodies
    + Colliders
    + Gravity
    ; Target: Make a simple game like space invader or tetris

- Scripting

- Sprite atlas UI (texture load settings)

- Develop 3D rendering system (mesh load and rendering, materials and shaders)


=============== TODO ============
[ ] rigidbodies types
[ ] ray cast api
[ ] write a rough lua-scripting api for entity
    - camera component
    - serialize serializable fields
    - update api docs
[ ] scripting api for input fields
[ ] scripting api for component add and remove
[ ] scripting api for entity create and destroy
[ ] scripting api for scene props [main-cam, load-new]

