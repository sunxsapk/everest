============ Developer Notes =================

Building a game engine from scratch is a huge task in hand. So, I have a plan
to put everything together in a very easy way for development purpose. Things
will proceed in following sequence :-

    - Project will have a master builder which will build 2 subprojects.
    - First project it will build is everest-engine.
    - Then, it will build the game.

    When will the scene/level-editor be built then?
    - Immediately after the scene is made serializable.

=============== Roadmap ======================

- Rendering Texture
- Models format, (asset bundles)
- Entity Component System
- Serialization
- Level Format
- Tools (editor & stuff)
- Physics System
- Scripting
- Make a game run inside editor completely
- Standalone game running

=============== Current Activity =============

- Also, the logging system has its faults due to it been using c's printf for
    for writing on console. So, develop a new logging system for cpp, so that
    user can effectively use overridden '<<' operator for logging the objects too.

=============== Milestones ===================

Now, let's talk about the current milestones of the project:

+ First target is making a Event-System which will be used by the GLFW window,
    to dispatch some events to the Application layers.
    ; Components: Debug-Logger, Key-Events, Mouse-Events, Window-Events,
                Window, Application, Layer
    ; Target: Log each events on the console with detail info

+ Establish  a rendering system with movable camera system, that can draw basic
    shapes on the window.
    ; Components: Camera(Main-Camera), Renderer
    ; Target: Move a object(Shape) around screen, using key-inputs, mouse-inputs
        and if possible with window-move events too.

+ Before starting to work on a major bulk of a engine, we need a system for
    profiling the engine, so do something about that. Make a memory monitoring
    system, resources monitor, etc.

- Make a fully functioning 2D renderer, with scene submission and whatnot. Research
    some more on this topic and try to go towards the path of optimized renderering
    systems like instanced rendering and batched rendering. Add supports for multiple
    textures, sprites, etc. Also, make the orthographic camera not effect the shape
    of the sprites when resizing the screen. It is okay, if size differs but not
    the shapes. Also add support for texture/sprite atlas.
    ; Components: Orthographic camera, Renderer, Textures, Shaders, Sprite atlas,etc

+ Develop an Entity Component System before actually going on with scene setup
    ; Components: ECS, <Components : Transform, Sprite>

- Make a scene editor layout and add a simple 2d scene editing and saving mechanism.
    Add gizmo to the scene for ease of editing and some mouse related functionalities
    for moving and selecting things. Make everything ready for big things to come next.
    Also experiment with the instanced renderer2d.
    ; Components: Sprite atlas, Scene editor, Scene loader & serializer (partial),
        IMGUI docked layout and Menu, Mouse, Tilemap
        position: world space & screen space, Gizmo, UI
    ; Target: Edit and setup a scene for simple 2d game(maybe copy of Predcave)

- Play, Pause and Stop scenes, Reset scenes

- Develop Physics system for 2D setup and pave a way for 3D physics too
    - Static and Dynamic Rigidbodies
    - Colliders
    - Gravity
    ; Target: Make a simple game like space invader or tetris

- Develop 3D rendering system (mesh load and rendering, materials and shaders)


=============== TEMP ============
- maybe make a way to visualize everything... i.e. call render API from anywhere during editing
